############## DEPLOYMENT CONTROLA O ReplicaSet ############
#// apiVersion Pode Ser Consultada Pelo Comando kubectl api-resources | grep Deployment
#// onde se pega a versão da API Kubernetes e Utiliza, isso pode mudar de versão mas
#// dificilmente vai ocorrer.
apiVersion: apps/v1
#// Kind especifica o tipo de objeto, no caso deste YAML, Kind Deployment - Tipo Deployment
kind: Deployment
#// Metadata são os dados adicionais que vão ser utilizados, no caso abaixo
#// Definindo o nome do Deployment para "meuDeployment"
metadata:
  name: meudeployment
# Especificações que o Deployment Vai Receber
spec:
  replicas: 20 #especificando que deve ser rodado 5 replicas
# No Caso, configurando o SELECTOR, que é a forma como ele vai verificar e escolher os pods para efetuar as mudanças que queremos
# no caso, ele vai prcurar pela label "web", para gerenciamento
  selector:
    matchLabels:
      app: web
# caso bata a label app com parametro web, será efetuado as ações deste YAML
  template:
    # template se coloca as especificações do POD que será gerenciado
    # os dados do arquivo POD.yaml mas sem alguns campos como API Version, Kind etc.
    metadata: 
      name: meupod-azul
    # alterando o label para app web para gerenciamento pelo Deployment
      labels:
        app: web
    #// Especificações do POD, especificando que ele vai rodar containers
    #// Cada POD pode rodar 1 ou mais containers, bastando especificar eles, no caso abaixo está
    #// sendo usado somente 1 container
    spec:
      containers:
    #// nome do container
      - name: site
    #// imagem que será utilizada para subir o container
        image: fabricioveronez/web-page:green
    #// portas que serão disponibilizadas para acesso ao serviço dentro do container
        ports: 
        - containerPort: 80

## COMANDO DE ROLLBACK - ROLLOUT de versão
# kubectl rollout undo deployment meudeployment - colocar nome do deployment